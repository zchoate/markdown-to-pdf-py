name: image

on:
  push:
    tags:
      - v*.*.*
    branches:
      - 'main'

env:
  IMAGE_NAME: markdown-to-pdf-py

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: write
      packages: write
      statuses: read
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build local container
        uses: docker/build-push-action@v2
        with:
          tags: localbuild/${{ env.IMAGE_NAME }}:latest
          push: false
          load: true

      - name: Create SBoM
        uses: anchore/sbom-action@v0
        id: sbom
        with:
          image: "localbuild/${{ env.IMAGE_NAME }}:latest"

      - name: Scan Image
        uses: anchore/scan-action@v3
        id: scan
        with:
          image: "localbuild/${{ env.IMAGE_NAME }}:latest"
          fail-build: false
          # severity-cutoff: critical
          # acs-report-enable: true

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Push to GHCR
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag localbuild/$IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
      - name: Create scan report artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.IMAGE_NAME }}_sarif.json
          path: ${{ steps.scan.outputs.sarif }}
      
      - name: Upload scan report artifact
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          if [[ $VERSION != "v"* ]]; then
            echo "not a release, no upload required"
            exit
          fi
          FILE=${{ steps.scan.outputs.sarif }}
          MIME=$(file -b --mime-type ${FILE})
          echo ${{ github.event }}
          echo ${{ github.event.release }}
          URL=$(echo ${{ github.event.release.upload_url }} | sed 's/{?name,label}//g')
          curl -s \
            -H "Authorization: token ${{ github.token }} \
            -H "Content-Type: ${MIME}" \
            --data-binary @${FILE} \
            "${URL}?name=${FILE}"